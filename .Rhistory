library(stringr)
library(readr)
trump_hate_crimes_2017_df <- read.csv("https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2017_Hate_Crime_Stats.csv?token=AV7DG22MOKEFBBHB25H4RS3BUVBBU")
urlfile2013 = "https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2013_Hate_Crime_Stats.csv?token=AV53HF6REY3NYNOSWXRKWRTBUU6VM"
hate_crime_stats2013 <- read_csv(url(urlfile2013))
hate_crimes_vs_trump <- trump_hate_crimes_2017_df%>%
group_by(state)%>%mutate(state = str_to_title(state),
hate_crimes_per_100k_people = round(hate_crimes_per_100k_splc, digits = 2),
trump_votes_per_100k_people = round(share_voters_voted_trump, digits = 2))%>%
select(hate_crimes_per_100k_people, trump_votes_per_100k_people)
colnames(hate_crimes_vs_trump) <- gsub("\\_"," ", colnames(hate_crimes_vs_trump))
colnames(hate_crimes_vs_trump) <- str_to_title((colnames(hate_crimes_vs_trump)))
kableExtra::kable_styling(knitr::kable(hate_crimes_vs_trump, caption="hate_crimes_vs_trump", escape = FALSE))
library(dplyr)
library(stringr)
library(readr)
library(dplyr)
library(stringr)
library(readr)
trump_hate_crimes_2017_df <- read.csv("https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2017_Hate_Crime_Stats.csv?token=AV7DG22MOKEFBBHB25H4RS3BUVBBU")
urlfile2013 = "https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2013_Hate_Crime_Stats.csv?token=AV53HF6REY3NYNOSWXRKWRTBUU6VM"
hate_crime_stats2013 <- read_csv(url(urlfile2013))
hate_crimes_vs_trump <- trump_hate_crimes_2017_df%>%
group_by(state)%>%mutate(state = str_to_title(state),
hate_crimes_per_100k_people = round(hate_crimes_per_100k_splc, digits = 2),
trump_votes_per_100k_people = round(share_voters_voted_trump, digits = 2))%>%
select(hate_crimes_per_100k_people, trump_votes_per_100k_people)
colnames(hate_crimes_vs_trump) <- gsub("\\_"," ", colnames(hate_crimes_vs_trump))
colnames(hate_crimes_vs_trump) <- str_to_title((colnames(hate_crimes_vs_trump)))
install.packages("kableExtra")
library(stringr)
library(readr)
library(dplyr)
library(stringr)
library(readr)
trump_hate_crimes_2017_df <- read.csv("https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2017_Hate_Crime_Stats.csv?token=AV7DG22MOKEFBBHB25H4RS3BUVBBU")
hate_crimes_vs_trump <- trump_hate_crimes_2017_df%>%
group_by(state) %>%
mutate(state = str_to_title(state), hate_crimes_per_100k_people = round(hate_crimes_per_100k_splc, digits = 2), trump_votes_per_100k_people = round(share_voters_voted_trump, digits = 2)) %>%
select(hate_crimes_per_100k_people, trump_votes_per_100k_people)
colnames(hate_crimes_vs_trump) <- gsub("\\_"," ", colnames(hate_crimes_vs_trump))
colnames(hate_crimes_vs_trump) <- str_to_title((colnames(hate_crimes_vs_trump)))
print(hate_crimes_vs_trump)
library(dplyr)
library(stringr)
library(readr)
library(dplyr)
library(stringr)
library(readr)
trump_hate_crimes_2017_df <- read.csv("https://raw.githubusercontent.com/info-201a-au21/final-project-vegajethani/main/data%3A/2017_Hate_Crime_Stats.csv?token=AV7DG22MOKEFBBHB25H4RS3BUVBBU")
hate_crimes_vs_trump <- trump_hate_crimes_2017_df%>%
group_by(state) %>%
mutate(state = str_to_title(state), hate_crimes_per_100k_people = round(hate_crimes_per_100k_splc, digits = 2), trump_votes_per_100k_people = round(share_voters_voted_trump, digits = 2)) %>%
select(hate_crimes_per_100k_people, trump_votes_per_100k_people)
colnames(hate_crimes_vs_trump) <- gsub("\\_"," ", colnames(hate_crimes_vs_trump))
colnames(hate_crimes_vs_trump) <- str_to_title((colnames(hate_crimes_vs_trump)))
print(hate_crimes_vs_trump)
hate_crimes_vs_trump <- trump_hate_crimes_2017_df%>%
group_by(state) %>%
mutate(state = str_to_title(state), hate_crimes_per_100k_people = round(hate_crimes_per_100k_splc, digits = 2), trump_votes_per_100k_people = round(share_voters_voted_trump, digits = 2)) %>%
select(hate_crimes_per_100k_people, trump_votes_per_100k_people)
colnames(hate_crimes_vs_trump) <- gsub("\\_"," ", colnames(hate_crimes_vs_trump))
colnames(hate_crimes_vs_trump) <- str_to_title((colnames(hate_crimes_vs_trump)))
View(hate_crimes_vs_trump)
shiny::runApp('Desktop/Info201/exercises-FionaJain/chapter-19-exercises/exercise-1')
install.packages("shiny")
shiny::runApp('Desktop/Info201/exercises-FionaJain/chapter-19-exercises/exercise-1')
install.packages("shiny")
library(shiny)
ui <- fluidPage(
# A first-level header (`h1()`) with the content "First Shiny Website"
h1("First Shiny Website"),
# A paragraph (`p()`) with content saying how excited you are about Shiny.
# The paragraph should include some `strong()` content.
p("I am so" , strong("excited") , "for my very first Shiny project"),
# An image (`img()`) with no content but the `src` attribute of the url:
# https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif
img("", src = "https://media2.giphy.com/media/l3q2Ip7FrmPE33EiI/giphy.gif"),
# A second paragraph describing how excited you are about sliders.
# The paragraph should include some emphasized (`em()`) content.
p("I am also" , em("so") , "excited about sliders because they seem so" , em("fun")),
# A slider with a key `my_slider`, an appropriate label, a min value of 10,
# A max value of 100, and a default value of 50
sliderInput("my_slider" , "First Slider" , min=10 , max=100 , value=50),
# (Your `fluidLayout()` should end here)
)
# This defines a server that doesn't do anything yet, but is needed to run the app.
server <- function(input, output) {
# Will be next!
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui , server = server)
# Exercise 2: a basic Shiny app
# Load the `shiny` package
library(shiny)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)" , value = 0 , min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input , output) {
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(paste0("$" , input$price * input$quantity))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui , server = server)
runApp('Desktop/Info201/exercises-FionaJain/chapter-19-exercises/exercise-3')
runApp('Desktop/Info201/exercises-FionaJain/chapter-19-exercises/exercise-3')
diamonds_sample <- sample_n(diamonds, 1000)
price_range <- range(diamonds_sample$price)
colname_vector <- colnames(diamonds)
price_input <- sliderInput(
inputId = "price_choice",
label = "Price (in dollars)",
min = price_range[1],
max = price_range[2],
value = price_range
)
feature_input <- selectInput(
inputId = "feature" ,
label = "Feature of Interest" ,
choices = "select_values" ,
selected = "carat"
)
ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Your `prince_input`
price_input,
# Your `feature_input`
feature_input,
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
checkboxInput("smooth", label = strong("Show Trendline"), value=TRUE),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput("plot")
)
diamonds_sample <- sample_n(diamonds, 1000)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
price_range <- range(diamonds_sample$price)
# For convenience, get a vector of column names from the `diamonds` data set to
# use as select inputs
colname_vector <- colnames(diamonds)
# To help keep the code organized, we'll store some UI elements in variables
# _before_ defining the UI.
# Define a variable `price_input` that is a `sliderInput()` with the following
# properties:
# - an inputId of `price_choice`
# - a label of "Price (in dollars)"
# - min and max valuesvalue based on the `price_range` calculated above
# - a current value equal to the price range
price_input <- sliderInput(
inputId = "price_choice",
label = "Price (in dollars)",
min = price_range[1],
max = price_range[2],
value = price_range
)
# Define a variable `feature_input` that is a `selectInput()` with the
# label "Feature of Interest". This dropdown should let the user pick one of
# the columns of the diamond data set. Use the `carat` column as a default
# Make sure to set an inputId to reference in your server!
feature_input <- selectInput(
inputId = "feature" ,
label = "Feature of Interest" ,
choices = "select_values" ,
selected = "carat"
)
# Define a UI using a `fluidPage()` layout with the following content:
ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer"),
# Your `prince_input`
price_input,
# Your `feature_input`
feature_input,
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
checkboxInput("smooth", label = strong("Show Trendline"), value=TRUE),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput("plot")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input , output) {
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$plot <- renderPlot({
# This function should first filter down the `diamonds_sample` data
# using the input price range (remember to get both ends)!
plot_data <- diamonds_sample %>%
filter(price > input$price_choice[1] , price < input$price_choice[2])
# Use the filtered data set to create a ggplot2 scatter plot with the
# user-select column on the x-axis, and the price on the y-axis,
# and encode the "cut" of each diamond using color
# Save your plot as a variable.
p <- ggplot(
data = plot_data,
mapping = aes_string(x = input$feature, y="price", color="cut")
) +
geom_point()
# Finally, if the "trendline" checkbox is selected, you should add (+)
# a geom_smooth geometry (with `se=FALSE`) to your plot
# Hint: use an if statement to see if you need to add more geoms to the plot
if (input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
# Be sure and return the completed plot!
p
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
urlfile = "https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv"
co2_emissions <- read_csv(url(urlfile))
library(readr)
urlfile = "https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv"
co2_emissions <- read_csv(url(urlfile))
urlfile = "https://raw.githubusercontent.com/owid/co2-data/master/owid-co2-data.csv"
co2_emissions <- read_csv(url(urlfile))
View(co2_emissions)
library(shiny)
intro_page <- div(
titlePanel("Introduction Page"),
p("Hello! Welcome to my Shiny Application.")
)
View(intro_page)
install.packages("shinythemes")
library(readr)
library(shiny)
library(shinythemes)
read.csv("https://raw.githubusercontent.com/vegajethani/Final-Deliverable/master/drugs.csv?token=AV53HF2JN4WEDLGDYDNHNRTBWFHZS")
urlfile <- "https://raw.githubusercontent.com/vegajethani/Final-Deliverable/master/drugs.csv?token=AV53HF2JN4WEDLGDYDNHNRTBWFHZS"
drug_data <- read_csv(url(urlfile))
library(dplyr)
library(tidyr)
library(ggplot2)
library(shiny)
library(shinythemes)
library(readr)
urlfile <- "https://raw.githubusercontent.com/vegajethani/Final-Deliverable/master/drugs.csv?token=AV53HF2JN4WEDLGDYDNHNRTBWFHZS"
drug_data <- read_csv(url(urlfile))
View(drug_data)
View(drug_data)
cocaine_use <- drug_data %>%
select(State , Year , `Population.12-17` , `Population.18-25` , `Population.26+` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.18-25` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.26+` , `Rates.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Rates.Illicit Drugs.Cocaine Used Past Year.18-25` , `Rates.Illicit Drugs.Cocaine Used Past Year.26+`
)
View(cocaine_use)
state_select <- selectInput(
inputId = "state_select",
label = h2("Select State"),
choices = cocaine_use$State,
selected = cocaine_use$State[1],
multiple = FALSE
)
cocaine_years <- range(cocaine_use$Year)
# Second Widget- Slider
year_slider <- sliderInput(
inputId = "year_select",
label = h2("Select Year"),
sep = "",
min = cocaine_years[1],
max = cocaine_years[2],
value = cocaine_years[2],
step = 1
)
plot_data <- reactive({
data <- drug_data %>%
group_by(State , Year) %>%
filter(State == input$state_select) %>%
filter(Year <= input$year_select)
return(data)
# app_ui.R
# Fiona Jain
# Final Deliverable
# Load Packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(shiny)
library(shinythemes)
library(readr)
# Load Dataset
urlfile <- "https://raw.githubusercontent.com/vegajethani/Final-Deliverable/master/drugs.csv?token=AV53HF2JN4WEDLGDYDNHNRTBWFHZS"
drug_data <- read_csv(url(urlfile))
# Data Manipulation for Widget 1
cocaine_use <- drug_data %>%
select(State , Year , `Population.12-17` , `Population.18-25` , `Population.26+` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.18-25` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.26+` , `Rates.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Rates.Illicit Drugs.Cocaine Used Past Year.18-25` , `Rates.Illicit Drugs.Cocaine Used Past Year.26+`
)
# First Widget- Checkbox
state_select <- selectInput(
inputId = "state_select",
label = h2("Select State"),
choices = cocaine_use$State,
selected = cocaine_use$State[1],
multiple = FALSE
)
# Data Manipulation for Widget 2
cocaine_years <- range(cocaine_use$Year)
# Second Widget- Slider
year_slider <- sliderInput(
inputId = "year_select",
label = h2("Select Year"),
sep = "",
min = cocaine_years[1],
max = cocaine_years[2],
value = cocaine_years[2],
step = 1
)
# Ui
ui <- fluidPage(
h1("Data Analysis on Cocaine Use in Students Ages 12-17"),
tabsetPanel(
tabPanel(
"Plot",
sidebarLayout(
sidebarPanel(state_select , year_slider),
mainPanel(
plotlyOutput("plot")
)))))
# app_server.R
# Fiona Jain
# Final Deliverable
# Load Packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(shiny)
library(shinythemes)
library(readr)
# Load Dataset
urlfile <- "https://raw.githubusercontent.com/vegajethani/Final-Deliverable/master/drugs.csv?token=AV53HF2JN4WEDLGDYDNHNRTBWFHZS"
drug_data <- read_csv(url(urlfile))
# Data Manipulation
cocaine_use <- drug_data %>%
select(State , Year , `Population.12-17` , `Population.18-25` , `Population.26+` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.18-25` ,
`Totals.Illicit Drugs.Cocaine Used Past Year.26+` , `Rates.Illicit Drugs.Cocaine Used Past Year.12-17` ,
`Rates.Illicit Drugs.Cocaine Used Past Year.18-25` , `Rates.Illicit Drugs.Cocaine Used Past Year.26+`
)
cocaine_years <- range(cocaine_use$Year)
server <- function(input, output) {
# Data for Plot
plot_data <- reactive({
data <- drug_data %>%
group_by(State , Year) %>%
filter(State == input$state_select) %>%
filter(Year <= input$year_select)
return(data)
})
# Actual Plot
output$plot <- renderPlotly({
plot_cocaine <- ggplot(plot_data()) +
geom_line(
mapping = aes(x = Year , y = `Totals.Illicit Drugs.Cocaine Used Past Year.12-17` , linetype = State), stat = "identity",
)
return(ggplotly(plot_cocaine))
})
}
setwd("~/Desktop/Info201/Final-Deliverable")
source("app_ui.R")
source("app_server.R")
runApp('Desktop/Info201/Final-Deliverable')
runApp('Desktop/Info201/Final-Deliverable')
runApp('Desktop/Info201/Final-Deliverable')
runApp('Desktop/Info201/Final-Deliverable')
runApp('Desktop/Info201/Final-Deliverable')
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
setwd("~/Desktop/Info201/Final-Deliverable")
source("fiona_app_ui.R")
source("fiona_app_server.R")
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
shinyApp(ui = ui, server = server)
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
library(shiny); runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
runApp('Desktop/Info201/Final-Deliverable/fiona_app.R')
library(shiny); runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
library(htmltools)
# Ui
ui <- fluidPage(
h1("Data Analysis - Final Deliverable") ,
h2("Fiona Jain, Vega Jethani, Aaron Jenkins, Mehr Mehta"),
tabsetPanel(
tabPanel(
),
tabPanel(
"Plot and Summary: Cocaine",
sidebarLayout(
sidebarPanel(
h3("Cocaine Usage in Children Ages 12-17" ,
style = "color: #4fc3f7"),
state_select , year_slider),
mainPanel(
plotlyOutput("plot"),
p("I chose to make this graph to show the trend in cocaine use among
children. This graph clearly displays the trend in cocaine usage
among children ages 12-17 in different states. Users can select a
state and even which specific years they want to look at. Drug use in
children is a major problem; it can hinder development, lead to mental
health and physical health issues, and it needs to be a topic that
people are more aware of. Being able to see these trends helps get a
better picture of the extent of this issue. For example, many states
had drastic rises in cocaine use among children in 2015.")
)
)
) ,
tabPanel(
"Chart and Summary: Alcohol",
fluidRow(
h3("  Alcohol Disorder Percentage for Ages 12-17" ,
style = "color: green") ,
column(State_select, width = 6),
column(Year_slider, width = 6)
),
fluidRow(
column(plotlyOutput("scatter_plot"), width = 12)
),
p(
strong("Explanation of Graph and Trends")
),
p(
"For this graph I decided to focus on the rate of
alcohol disorders in ages 12-17 per state.
I choose to focus on the rate instead of whole
numbers because each state
has a different population, so the chart would therefore not be accurate.
I wanted to focus on ages 12-17 because
I thought that this age would be the most easily
influenced to partake in such
activities. Some trends in the graph I noticed are that
all 7 states had decreasing rates. Indiana had the highest starting value and 2002,
while Alabama had the lowest. By 2018, Washington had the highest percentage value, while
Alabama had the lowest. There were many peaks for each individual state; each state had
about 5-8.")
)
)
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
library(shiny); runApp('Desktop/Info201/Final-Deliverable/combined_app.R')
setwd("~/Desktop/finalfinaldeliv")
source("combined_app_ui.R")
source("combined_app_server.R")
runApp('combined_app.R')
runApp('combined_app.R')
runApp('combined_app.R')
setwd("~/Desktop/finalfinaldeliv")
source("combined_app_ui.R")
source("combined_app_server.R")
runApp('combined_app.R')
